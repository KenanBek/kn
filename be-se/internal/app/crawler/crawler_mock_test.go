// Code generated by MockGen. DO NOT EDIT.
// Source: crawler.go

// Package crawler is a generated GoMock package.
package crawler

import (
	gomock "github.com/golang/mock/gomock"
	domain "kn/se/internal/domain"
	reflect "reflect"
)

// MockCrawler is a mock of Crawler interface
type MockCrawler struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerMockRecorder
}

// MockCrawlerMockRecorder is the mock recorder for MockCrawler
type MockCrawlerMockRecorder struct {
	mock *MockCrawler
}

// NewMockCrawler creates a new mock instance
func NewMockCrawler(ctrl *gomock.Controller) *MockCrawler {
	mock := &MockCrawler{ctrl: ctrl}
	mock.recorder = &MockCrawlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCrawler) EXPECT() *MockCrawlerMockRecorder {
	return m.recorder
}

// Crawl mocks base method
func (m *MockCrawler) Crawl() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Crawl")
}

// Crawl indicates an expected call of Crawl
func (mr *MockCrawlerMockRecorder) Crawl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Crawl", reflect.TypeOf((*MockCrawler)(nil).Crawl))
}

// MockSourceLoader is a mock of SourceLoader interface
type MockSourceLoader struct {
	ctrl     *gomock.Controller
	recorder *MockSourceLoaderMockRecorder
}

// MockSourceLoaderMockRecorder is the mock recorder for MockSourceLoader
type MockSourceLoaderMockRecorder struct {
	mock *MockSourceLoader
}

// NewMockSourceLoader creates a new mock instance
func NewMockSourceLoader(ctrl *gomock.Controller) *MockSourceLoader {
	mock := &MockSourceLoader{ctrl: ctrl}
	mock.recorder = &MockSourceLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSourceLoader) EXPECT() *MockSourceLoaderMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockSourceLoader) Load() ([]domain.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].([]domain.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockSourceLoaderMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockSourceLoader)(nil).Load))
}

// MockScraper is a mock of Scraper interface
type MockScraper struct {
	ctrl     *gomock.Controller
	recorder *MockScraperMockRecorder
}

// MockScraperMockRecorder is the mock recorder for MockScraper
type MockScraperMockRecorder struct {
	mock *MockScraper
}

// NewMockScraper creates a new mock instance
func NewMockScraper(ctrl *gomock.Controller) *MockScraper {
	mock := &MockScraper{ctrl: ctrl}
	mock.recorder = &MockScraperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScraper) EXPECT() *MockScraperMockRecorder {
	return m.recorder
}

// GetLinks mocks base method
func (m *MockScraper) GetLinks(url string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinks", url)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks
func (mr *MockScraperMockRecorder) GetLinks(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockScraper)(nil).GetLinks), url)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// HasLink mocks base method
func (m *MockRepository) HasLink(hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLink", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasLink indicates an expected call of HasLink
func (mr *MockRepositoryMockRecorder) HasLink(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLink", reflect.TypeOf((*MockRepository)(nil).HasLink), hash)
}

// SaveLink mocks base method
func (m *MockRepository) SaveLink(link *domain.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLink", link)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLink indicates an expected call of SaveLink
func (mr *MockRepositoryMockRecorder) SaveLink(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLink", reflect.TypeOf((*MockRepository)(nil).SaveLink), link)
}

// IsArticle mocks base method
func (m *MockRepository) IsArticle(hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsArticle", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsArticle indicates an expected call of IsArticle
func (mr *MockRepositoryMockRecorder) IsArticle(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsArticle", reflect.TypeOf((*MockRepository)(nil).IsArticle), hash)
}
